<?php
/**
 * @file
 * taxonomy to apachesolr link module file.
 * Defines a formatter to change the render of a taxonomy link to point to
 * a Solr Search.
 * 
 */

/**
 * Implements hook_field_formatter_info().
 */
function taxonomy_to_apachesolr_link_field_formatter_info() {
  return array(
    'taxonomy_to_apachesolr_link' => array(
      'label' => t('Apachesolr Link'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'facetapi_searcher' => 'facetapi_searcher',
        'search_path' => 'search',
        'target' => '_self',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function taxonomy_to_apachesolr_link_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'taxonomy_to_apachesolr_link':
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        $element[$delta] = array(
          '#type' => 'link',
          '#title' => $term->name,
          '#href' => _taxonomy_to_apachesolr_link_create_solr_search_url($term, $field['field_name'], $display['settings']['search_path'], $display['settings']['facetapi_searcher']),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function taxonomy_to_apachesolr_link_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $searchers = facetapi_get_searcher_info();
  $active_searchers = array();
  foreach ($searchers as $searcher => $info) {
    $active_searchers[$searcher] = $info['label'];
  }
  $element['facetapi_searcher'] = array(
    '#type' => 'select',
    '#title' => t('Searcher'),
    '#description' => t('Select the searcher you will be using to link to.'),
    '#options' => $active_searchers,
    "#default_value" => $settings['facetapi_searcher'],
  );
  $element['search_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Search path'),
    '#description' => t('Example: If your search path is at http://mysite/solr you should put <strong>solr</strong> in the field'),
    '#default_value' => $settings['search_path'],
  );
  $element['target'] = array(
    '#type' => 'select',
    '#title' => "Link target",
    "#description" => t('Select the target of the link'),
    '#options' => _taxonomy_to_apachesolr_link_a_target_options(),
    "#default_value" => $settings['target'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function taxonomy_to_apachesolr_link_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Path: @search_path, Searcher: @searcher, Target: @target', array(
    '@search_path' => $settings['search_path'], '@searcher' => $settings['facetapi_searcher'], '@target' => $settings['target'])
  );
  return $summary;
}

/**
 * Returns a solrsearch filter query link for a taxonomy term.
 */
function _taxonomy_to_apachesolr_link_create_solr_search_url(&$term, $field_name, $search_path, $searcher) {
  $adapter = facetapi_adapter_load($searcher);
  $facet = facetapi_facet_load($field_name, $searcher);
  // If a facet is not correctly returned return the term link.
  if (is_array($facet)) {
    $href = $adapter->getFacetPath($facet, array($term->tid), 0);
    $link = $search_path . substr($href, strlen($_GET['q']));
  }
  else {
    $link = 'taxonomy/term/' . $term->tid;
  }
  drupal_alter('apachesolr_taxonomy_link', $link, $context = array('term' => $term, 'field_name' => $field_name, 'search_path' => $search_path, 'searcher' => $searcher));
  return $link;
}

/**
 * Returns array of a html element target options.
 */
function _taxonomy_to_apachesolr_link_a_target_options() {
  return array(
    '_self' => t('_self - In the Same frame as it was clicked'),
    '_blank' => t('_blank - In a new window or tab'),
    '_parent' => t('_parent - In the parent frame'),
    '_top' => t('_top - The full body of the window'),
  );
}
